name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Build Docker images
        run: |
          docker build -t dream-vacations-frontend:latest ./frontend
          docker build -t dream-vacations-backend:latest ./backend
      - name: Start Docker containers
        run: |
          docker-compose -f ./docker-compose.yml up -d
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      - name: Execute PostgreSQL Script
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: psql -h localhost -p 5432 -U postgres -f ./script_dreamvacations.sql

      - name: Download Trivy
        run: |
          sudo apt-get install -y wget gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
      - name: Create versioned subfolder
        run: |
          BASE_DIR="scan_results"
          FOLDER_NAME="image_scan_result"
          VERSION="V $(date +%Y.%m.%d.%H.%M.%S)"
          NEW_FOLDER="$BASE_DIR/$FOLDER_NAME - $VERSION"
          mkdir -p "$NEW_FOLDER"
          echo "Created new folder: $NEW_FOLDER"
      - name: Scan Docker images with Trivy
        run: |
          BASE_DIR="scan_results"
          FOLDER_NAME="image_scan_result"
          VERSION="V $(date +%Y.%m.%d.%H.%M.%S)"
          NEW_FOLDER="$BASE_DIR/$FOLDER_NAME - $VERSION"
          mkdir -p "$NEW_FOLDER"
          trivy image --format table --output "$NEW_FOLDER/trivy_postgres_report.txt" postgres:latest
          trivy image --format table --output "$NEW_FOLDER/trivy_frontend_image_report.txt" dream-vacations-frontend:latest
          trivy image --format table --output "$NEW_FOLDER/trivy_backend_image_report.txt" dream-vacations-backend:latest
          trivy image --format table --output "$NEW_FOLDER/trivy_adminer_image_report.txt" adminer:latest
      - name: Commit Trivy scan results
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"
          git pull origin main
          if [[ `git status --porcelain` ]]; then
            git add scan_results/*
            git commit -m "Add Trivy scan results"
            git push https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git
          else
            echo "No changes to commit"
          fi
      - name: Create version tag
        id: tag
        run: |
          TAG="v$(date +%Y%m%d%H%M%S)"
          echo "New tag: $TAG"
          git tag $TAG
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Push version tag
        run: |
          git push origin ${{ steps.tag.outputs.tag }}
  Push-to-Docker-Hub:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: "Create version number"
        run: |
         echo "VERSION_NUMBER=V1.0.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV


      - name: "Build Docker Images"
        run:  | 
         docker build -t dream-vacations-frontend:${{ env.VERSION_NUMBER}} ./frontend
         docker build -t dream-vacations-backend:${{ env.VERSION_NUMBER}} ./backend
         
      - name: "Push to Docker Hub"
        run: |
           docker push mattaudu/dream-vacations-frontend:${{ env.VERSION_NUMBER }}
           docker push mattaudu/dream-vacations-backend:${{ env.VERSION_NUMBER }}


      
  